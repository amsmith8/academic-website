library( nnet )
library( parallel )
library( pROC )
library( randomForest )
library( raster )
library( rgdal )
library( sf )
library( tictoc )
# ****** NOTE: SENSITIVITY AND SPECCIFICITY SCORES WILL BE BACKWARDS! 'CARET'
# CHOOSES CLASSES IN ALPHABETICALY!!! ****
set.seed( 123 )
# Note the number of computer cores available for parallel-processing tasks.
# set the training parameters for model learning
TrainingParameters <- trainControl( method = "repeatedcv" ,  #  repeated CV
classProbs = TRUE ,     # outputs for chloropleths
savePredictions = TRUE ,  # needed to calculate AUC
summaryFunction = twoClassSummary ,
returnResamp = "all" ,
index = createMultiFolds( pca_train$Present , 5 , 5 ) , # 5-folds, repeated 5 times
allowParallel = TRUE
)
#Create list of individually trained models.
tic( "model_ensemble_list" )
model_ensemble_list <- caretList( Present  ~ . ,
data = pca_train ,
trControl = TrainingParameters ,
metric = "ROC" ,
methodList = c( 'nnet' ,
'gbm' ,
'glm',
'rf',
'svmPoly' )
)
toc( )
# Create an ensemble of the trained models
tic( "model_ensemble" )
model_ensemble <- caretEnsemble( model_ensemble_list ,
metric = "ROC" ,
trControl = TrainingParameters,
)
toc( )
summary( model_ensemble )
###_____________________________________________________________________________
### Review results from trained models
###_____________________________________________________________________________
# Define each model in ensemble for simplicity
ann_model <- model_ensemble$models$nnet
gbm_model <- model_ensemble$model$gbm
glm_model <- model_ensemble$model$glm
rf_model <- model_ensemble$model$rf
svm_model <- model_ensemble$model$svmPoly
# Store in list for building boxplot with upper-cased names.
model_resamples <- resamples( list( ANN = ann_model ,
GBM = gbm_model ,
GLM = glm_model ,
RF = rf_model ,
SVM = svm_model
)
)
# Provides statistics for each model
summary( model_resamples )
# Mean and Stand Deviations of model metrics for paper.
a <- as.data.frame( cbind ( t(round ( model_resamples$values %>% summarise_if( is.numeric  , mean  ) , 3 ) )  ,
t(round ( model_resamples$values %>% summarise_if( is.numeric , sd ) , 3 ) )  ,
c( rep( "ANN" , times = 3 ) ,
rep( "GBM", times = 3 ) ,
rep( "GLM", times = 3 ) ,
rep( "RF", times = 3 ) ,
rep( "SVM", times = 3 )
) ,
rep( c( "ROC", "Sens" , "Spec" )  )
)
)
colnames( a ) <- c( "Mean" , "SD" , "Model" , "Score" )
a$Mean <- as.numeric( a$Mean )
a$SD <- as.numeric( a$SD )
# Call on each statistic score in nice mini-tables
a %>% filter( Score == "ROC" )
a %>% filter( Score == "Sens" )
a %>% filter( Score == "Spec" )
# Collect observed statitics for enesmble model: Not the valuyes are averages.
b <- model_ensemble[[ "ens_model" ]][[ "resample" ]]
colMeans( b[ , 1:3 ] )
# Create boxplot with performance statistics on the repeated CV procedure.
# bwplot( model_resamples  ,
#         scales = list( x = list( relation = "free" ) ) ,
#         strip = strip.custom( factor.levels=c( "AUC" , "Sensitivity" , "Specificity" ) ,
#                               strip.levels=rep( TRUE , 3 )
#                               ) ,
#         layout = c( 3 , 1 )
#         )
###_____________________________________________________________________________
### Test: OR state
###_____________________________________________________________________________
# Run the test data through each model and create a class probability matrix for each model.
test_or_ann <- predict( ann_model , newdata = pca_test , type = "prob" )
test_or_gbm <-  predict( gbm_model , newdata = pca_test , type = "prob" )
test_or_glm <-  predict( glm_model , newdata = pca_test , type = "prob" )
test_or_rf <- predict( rf_model , newdata = pca_test , type = "prob" )
test_or_svm <- predict( svm_model , newdata = pca_test , type = "prob" )
test_ensemble <-  predict( model_ensemble  , newdata = pca_test , type = "prob" )
#Import shapefile for creating chloropleths
OR <- st_read(  "./map_indexes_QD12K_or_3956464_01/map_indexes\\quads12k_a_or.shp"  )
# Create values in polygon data.frame for image processing
OR$ann <- test_or_ann[ , 1 ]
OR$gbm <-  test_or_gbm[ , 1 ]
OR$glm <-  test_or_glm[ , 1 ]
OR$rf <-  test_or_rf[ , 1 ]
OR$svm <-  test_or_svm[ , 1 ]
OR$ensemble <- test_ensemble
# Calculate AUC for prediction analysis
data.frame ( Model = c( "ANN" , "GBM" , "GLM" ,
"RF", "SVM" , "Ensemble"
) ,
AUC_test = c( pROC::roc( readRDS( "testing_or_present.rds" ) , OR$ann )$auc ,
pROC::roc( readRDS( "testing_or_present.rds" ) , OR$gbm )$auc ,
pROC::roc( readRDS( "testing_or_present.rds" ) , OR$glm )$auc ,
pROC::roc( readRDS( "testing_or_present.rds" ) , OR$rf )$auc ,
pROC::roc( readRDS( "testing_or_present.rds" ) , OR$svm )$auc ,
pROC::roc( readRDS( "testing_or_present.rds" ) , OR$ensemble )$auc
)
)
library(sf)
library(ggplot2)
library(ggpubr)
bwplot( model_resamples  ,
scales = list( x = list( relation = "free" ) ) ,
strip = strip.custom( factor.levels=c( "AUC" ,  "Sensitivity" , "Specificity" ) ,
strip.levels=rep( TRUE , 3 )
) ,
layout = c( 3 , 1 )
)
# Create individual ggplots of OR regression predictions
# ANN suitability plot
OR_ann <-
ggplot( OR ) +
geom_sf( data = OR ,
lwd = 0 ,
aes( fill = ann )
) +
theme( panel.background = element_blank( ) ,
#legend.title = element_text( "Suitability" ) ,
axis.line = element_line( color = "black" , size = 0.5 ) ,
legend.key = element_rect( fill = "white" , colour = "black" )
) +
scale_fill_gradientn( name = "Suitability" , limits = c(0,1) , colours = rev( hcl.colors( 100 , palette = "RdYlBu" ) ) )
# GBM suitability plot
OR_gbm <-
ggplot( OR ) +
geom_sf( data = OR ,
lwd = 0 ,
aes( fill = gbm )
) +
theme( panel.background = element_blank( ) ,
axis.line = element_line( color = "black" , size = 0.5 ) ,
legend.key = element_rect( fill = "white" , colour = "black" )
) +
scale_fill_gradientn( limits = c( 0 , 1 ) , colours = rev( hcl.colors( 100 , palette = "RdYlBu" ) ) )
# GLM suitability plot
OR_glm <-
ggplot( OR ) +
geom_sf( data = OR ,
lwd = 0 ,
aes( fill = glm )
) +
theme( panel.background = element_blank( ) ,
axis.line = element_line( color = "black" , size = 0.5 ) ,
legend.key = element_rect( fill = "white" , colour = "black" )
) +
scale_fill_gradientn( limits = c( 0 , 1 ) , colours = rev( hcl.colors( 100 , palette = "RdYlBu" ) ) )
# RF suitability plot
OR_rf <-
ggplot( OR ) +
geom_sf( data = OR ,
lwd = 0 ,
aes( fill = rf )
) +
theme( panel.background = element_blank( ) ,
axis.line = element_line( color = "black" , size = 0.5 ) ,
legend.key = element_rect( fill = "white" , colour = "black" )
) +
scale_fill_gradientn( limits = c( 0 , 1 ) , colours = rev( hcl.colors( 100 , palette = "RdYlBu" ) ) )
# SVM suitability plot
OR_svm <-
ggplot( OR ) +
geom_sf( data = OR ,
lwd = 0 ,
aes( fill = svm )
) +
theme( panel.background = element_blank( ) ,
axis.line = element_line( color = "black" , size = 0.5 ) ,
legend.key = element_rect( fill = "white" , colour = "black" )
) +
scale_fill_gradientn( limits = c( 0 , 1 ) , colours = rev( hcl.colors( 100 , palette = "RdYlBu" ) ) )
# Ensemble suitability plot
OR_ensemble <-
ggplot( OR ) +
geom_sf( data = OR ,
lwd = 0 ,
aes( fill = ensemble )
) +
theme( panel.background = element_blank( ) ,
axis.line = element_line( color = "black" , size = 0.5 ) ,
legend.key = element_rect( fill = "white" , colour = "black" )
) +
scale_fill_gradientn( limits = c( 0 , 1 ) , colours = rev( hcl.colors( 100 , palette = "RdYlBu" ) ) )
# Combine all the images.
ggarrange( OR_ann , OR_gbm ,
OR_glm , OR_rf,
OR_svm , OR_ensemble ,
ncol = 2 ,
nrow = 3 ,
common.legend = TRUE,
legend="right",
labels = "AUTO"
)
# Import necessary packages
library( dplyr )
library(factoextra)
library( ggplot2 )
# Import data.frames for model training & testing
training_wa <- readRDS( "training_wa.rds" )
testing_wa_unsure <- readRDS( "testing_wa_unsure.rds" )
testing_wa_other <- readRDS( "testing_wa_other.rds" )
testing_or <- readRDS( "testing_or.rds" )
# Add response variable to sets
training_wa$Present <-  readRDS( "training_counties_wa_present.rds ")
testing_wa_unsure$Present <- readRDS( "testing_counties_quads_unsure_present.rds" )
testing_wa_other$Present <- readRDS( "testing_counties_quads_other_present.rds" )
testing_or$Present <- readRDS( "testing_or_present.rds" )
###_____________________________________________________________________________
# Clean data for models
###_____________________________________________________________________________
# Add columns for 'testing_wa_unsure' of missing lc_types in regions.
testing_wa_unsure$eb_for <- 0
# Replace all NAs with 0
training_wa[ is.na( training_wa ) ] <- 0
testing_wa_unsure[ is.na( testing_wa_unsure ) ] <- 0
testing_wa_other[ is.na( testing_wa_other ) ] <- 0
testing_or[ is.na( testing_or ) ] <- 0
# Transform data sets for model needs
# Galbreath and Moreland  confirmed counties
training_wa <- training_wa %>%
mutate( forest = en_for + eb_for + dn_for + db_for + mix_for , .keep = "unused" ) %>% # combine all forest variables into one new variable
mutate( Present = factor( ifelse( Present == 1 , "S" , "U" ) ) ) %>% # convert numeric to two factor class
dplyr::select( -c( name , bar ) )  # drop  non informative variables
# Galbreath and Moreland  unsure counties
testing_wa_unsure <- testing_wa_unsure %>%
mutate( forest = en_for + eb_for + dn_for + db_for + mix_for , .keep = "unused" ) %>%
mutate( Present = factor( ifelse( Present == 1 , "S" , "U" ) ) ) %>%
dplyr::select( -c( name , bar ) )
testing_wa_unsure$snow <- 0
# Extraoplation set - Oregon state.
testing_or <- testing_or %>%
mutate( forest = en_for + eb_for + dn_for + db_for + mix_for , .keep = "unused" ) %>%
mutate( Present = factor( ifelse( Present == 1 , "S" , "U" ) ) ) %>%
dplyr::select( -c( name , bar ) )
# Rearrange variables to match for combining data.frames.
testing_wa_unsure2 <- training_wa[ , c( 1:10 , 12:38 , 11 ) ]
testing_wa_other2 <- testing_wa_other[ , c( 1:10 , 12:38 , 11 ) ]
testing_or <- testing_or[ , c( 1:10 , 12:38 , 11 ) ]
training_wa <- rbind( testing_wa_unsure2 , testing_wa_unsure )
# A data.frame consisting of all modeling values
A <- rbind( training_wa , testing_or )
# Scale by normalization the columns to incorporate into PCA transform.
A_norm <- as.data.frame( apply ( A[ , -36 ] , 2 , function( x ) ( x - min( x ) ) / ( max( x ) - min( x ) ) ) )
#perform PCA
pca_A <- prcomp( A_norm )
# View PCA info, determine number of PCs to retain.
eig.val <- get_eigenvalue( pca_A )
round ( eig.val , 3 ) # 9 PCs
# determine the number of PCs to retain where 95% of variance is explained.
retained_pcs <- which( eig.val$cumulative.variance.percent >= 90 )[ 1 ]
retained_pcs
# Create transformed data.
pca_train <- cbind( as.data.frame( pca_A$x[ 1:nrow( training_wa  ) , 1:retained_pcs ] ) ,
Present = as.character(  training_wa$Present ) )
pca_test <- cbind( as.data.frame( pca_A$x[ ( nrow( training_wa  ) + 1 ):( nrow( training_wa ) + nrow( testing_or ) ) , 1:retained_pcs ] ) ,
Present = testing_or$Present )
saveRDS( pca_train , "pca_train_data.rds" )
saveRDS( pca_test  , "pca_test_data.rds" )
###_____________________________________________________________________________
### Import necessary packages and external data
###_____________________________________________________________________________
# Import necessary packages
library( caret )
library( caretEnsemble )
library( dplyr )
library( gbm )
library( ggplot2 )
library( kernlab )
library( nnet )
library( parallel )
library( pROC )
library( randomForest )
library( raster )
library( rgdal )
library( sf )
library( tictoc )
# Load data frames
pca_train <- readRDS( "pca_train_data.rds" )
pca_test <- readRDS( "pca_test_data.rds" )
###_____________________________________________________________________________
### Build trained models
###_____________________________________________________________________________
# ****** NOTE: SENSITIVITY AND SPECCIFICITY SCORES WILL BE BACKWARDS! 'CARET'
# CHOOSES CLASSES IN ALPHABETICALY!!! ****
set.seed( 123 )
# Note the number of computer cores available for parallel-processing tasks.
# set the training parameters for model learning
TrainingParameters <- trainControl( method = "repeatedcv" ,  #  repeated CV
classProbs = TRUE ,     # outputs for chloropleths
savePredictions = TRUE ,  # needed to calculate AUC
summaryFunction = twoClassSummary ,
returnResamp = "all" ,
index = createMultiFolds( pca_train$Present , 5 , 5 ) , # 5-folds, repeated 5 times
allowParallel = TRUE
)
#Create list of individually trained models.
tic( "model_ensemble_list" )
model_ensemble_list <- caretList( Present  ~ . ,
data = pca_train ,
trControl = TrainingParameters ,
metric = "ROC" ,
methodList = c( 'nnet' ,
'gbm' ,
'glm',
'rf',
'svmPoly' )
)
toc( )
# Create an ensemble of the trained models
tic( "model_ensemble" )
model_ensemble <- caretEnsemble( model_ensemble_list ,
metric = "ROC" ,
trControl = TrainingParameters,
)
toc( )
summary( model_ensemble )
###_____________________________________________________________________________
### Review results from trained models
###_____________________________________________________________________________
# Define each model in ensemble for simplicity
ann_model <- model_ensemble$models$nnet
gbm_model <- model_ensemble$model$gbm
glm_model <- model_ensemble$model$glm
rf_model <- model_ensemble$model$rf
svm_model <- model_ensemble$model$svmPoly
# Store in list for building boxplot with upper-cased names.
model_resamples <- resamples( list( ANN = ann_model ,
GBM = gbm_model ,
GLM = glm_model ,
RF = rf_model ,
SVM = svm_model
)
)
# Provides statistics for each model
summary( model_resamples )
# Mean and Stand Deviations of model metrics for paper.
a <- as.data.frame( cbind ( t(round ( model_resamples$values %>% summarise_if( is.numeric  , mean  ) , 3 ) )  ,
t(round ( model_resamples$values %>% summarise_if( is.numeric , sd ) , 3 ) )  ,
c( rep( "ANN" , times = 3 ) ,
rep( "GBM", times = 3 ) ,
rep( "GLM", times = 3 ) ,
rep( "RF", times = 3 ) ,
rep( "SVM", times = 3 )
) ,
rep( c( "ROC", "Sens" , "Spec" )  )
)
)
colnames( a ) <- c( "Mean" , "SD" , "Model" , "Score" )
a$Mean <- as.numeric( a$Mean )
a$SD <- as.numeric( a$SD )
# Call on each statistic score in nice mini-tables
a %>% filter( Score == "ROC" )
a %>% filter( Score == "Sens" )
a %>% filter( Score == "Spec" )
# Collect observed statitics for enesmble model: Not the valuyes are averages.
b <- model_ensemble[[ "ens_model" ]][[ "resample" ]]
colMeans( b[ , 1:3 ] )
# Create boxplot with performance statistics on the repeated CV procedure.
# bwplot( model_resamples  ,
#         scales = list( x = list( relation = "free" ) ) ,
#         strip = strip.custom( factor.levels=c( "AUC" , "Sensitivity" , "Specificity" ) ,
#                               strip.levels=rep( TRUE , 3 )
#                               ) ,
#         layout = c( 3 , 1 )
#         )
###_____________________________________________________________________________
### Test: OR state
###_____________________________________________________________________________
# Run the test data through each model and create a class probability matrix for each model.
test_or_ann <- predict( ann_model , newdata = pca_test , type = "prob" )
test_or_gbm <-  predict( gbm_model , newdata = pca_test , type = "prob" )
test_or_glm <-  predict( glm_model , newdata = pca_test , type = "prob" )
test_or_rf <- predict( rf_model , newdata = pca_test , type = "prob" )
test_or_svm <- predict( svm_model , newdata = pca_test , type = "prob" )
test_ensemble <-  predict( model_ensemble  , newdata = pca_test , type = "prob" )
#Import shapefile for creating chloropleths
OR <- st_read(  "./map_indexes_QD12K_or_3956464_01/map_indexes\\quads12k_a_or.shp"  )
# Create values in polygon data.frame for image processing
OR$ann <- test_or_ann[ , 1 ]
OR$gbm <-  test_or_gbm[ , 1 ]
OR$glm <-  test_or_glm[ , 1 ]
OR$rf <-  test_or_rf[ , 1 ]
OR$svm <-  test_or_svm[ , 1 ]
OR$ensemble <- test_ensemble
# Calculate AUC for prediction analysis
data.frame ( Model = c( "ANN" , "GBM" , "GLM" ,
"RF", "SVM" , "Ensemble"
) ,
AUC_test = c( pROC::roc( readRDS( "testing_or_present.rds" ) , OR$ann )$auc ,
pROC::roc( readRDS( "testing_or_present.rds" ) , OR$gbm )$auc ,
pROC::roc( readRDS( "testing_or_present.rds" ) , OR$glm )$auc ,
pROC::roc( readRDS( "testing_or_present.rds" ) , OR$rf )$auc ,
pROC::roc( readRDS( "testing_or_present.rds" ) , OR$svm )$auc ,
pROC::roc( readRDS( "testing_or_present.rds" ) , OR$ensemble )$auc
)
)
save.image( file = 'Suitability_modeling_environment.RData' )
# Create box-whisker plot with performance statistics for the repeated CV resamples.
bwplot( model_resamples  ,
scales = list( x = list( relation = "free" ) ) ,
strip = strip.custom( factor.levels=c( "AUC" ,  "Sensitivity" , "Specificity" ) ,
strip.levels=rep( TRUE , 3 )
) ,
layout = c( 3 , 1 )
)
# Create individual ggplots of OR regression predictions
# ANN suitability plot
OR_ann <-
ggplot( OR ) +
geom_sf( data = OR ,
lwd = 0 ,
aes( fill = ann )
) +
theme( panel.background = element_blank( ) ,
#legend.title = element_text( "Suitability" ) ,
axis.line = element_line( color = "black" , size = 0.5 ) ,
legend.key = element_rect( fill = "white" , colour = "black" )
) +
scale_fill_gradientn( name = "Suitability" , limits = c(0,1) , colours = rev( hcl.colors( 100 , palette = "RdYlBu" ) ) )
# GBM suitability plot
OR_gbm <-
ggplot( OR ) +
geom_sf( data = OR ,
lwd = 0 ,
aes( fill = gbm )
) +
theme( panel.background = element_blank( ) ,
axis.line = element_line( color = "black" , size = 0.5 ) ,
legend.key = element_rect( fill = "white" , colour = "black" )
) +
scale_fill_gradientn( limits = c( 0 , 1 ) , colours = rev( hcl.colors( 100 , palette = "RdYlBu" ) ) )
# GLM suitability plot
OR_glm <-
ggplot( OR ) +
geom_sf( data = OR ,
lwd = 0 ,
aes( fill = glm )
) +
theme( panel.background = element_blank( ) ,
axis.line = element_line( color = "black" , size = 0.5 ) ,
legend.key = element_rect( fill = "white" , colour = "black" )
) +
scale_fill_gradientn( limits = c( 0 , 1 ) , colours = rev( hcl.colors( 100 , palette = "RdYlBu" ) ) )
# RF suitability plot
OR_rf <-
ggplot( OR ) +
geom_sf( data = OR ,
lwd = 0 ,
aes( fill = rf )
) +
theme( panel.background = element_blank( ) ,
axis.line = element_line( color = "black" , size = 0.5 ) ,
legend.key = element_rect( fill = "white" , colour = "black" )
) +
scale_fill_gradientn( limits = c( 0 , 1 ) , colours = rev( hcl.colors( 100 , palette = "RdYlBu" ) ) )
# SVM suitability plot
OR_svm <-
ggplot( OR ) +
geom_sf( data = OR ,
lwd = 0 ,
aes( fill = svm )
) +
theme( panel.background = element_blank( ) ,
axis.line = element_line( color = "black" , size = 0.5 ) ,
legend.key = element_rect( fill = "white" , colour = "black" )
) +
scale_fill_gradientn( limits = c( 0 , 1 ) , colours = rev( hcl.colors( 100 , palette = "RdYlBu" ) ) )
# Ensemble suitability plot
OR_ensemble <-
ggplot( OR ) +
geom_sf( data = OR ,
lwd = 0 ,
aes( fill = ensemble )
) +
theme( panel.background = element_blank( ) ,
axis.line = element_line( color = "black" , size = 0.5 ) ,
legend.key = element_rect( fill = "white" , colour = "black" )
) +
scale_fill_gradientn( limits = c( 0 , 1 ) , colours = rev( hcl.colors( 100 , palette = "RdYlBu" ) ) )
# Combine all the images.
ggarrange( OR_ann , OR_gbm ,
OR_glm , OR_rf,
OR_svm , OR_ensemble ,
ncol = 2 ,
nrow = 3 ,
common.legend = TRUE,
legend="right",
labels = "AUTO"
)
