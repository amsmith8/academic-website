unique(fin_corr4$cluster)
length(unique(fin_corr4$cluster))
q <- ddply(a,.(names),function(x) x[sample(length(unique(x)),1),])
q
a <- data.frame(fin_corr4$cluster)
a
a$names <- rownames(a)
a
unique(a)
unique(a$fin_corr4.cluster)
formula.list <- c()
for (i in 1:lenth(unique(fin_corr4$cluster))){
sub <- subset.data.frame(a, fin_corr4$cluster == i)
sup_sample <- sample(sub,1)
formula.list <- c(formula.list,sup_sample)
}
for (i in 1:length(unique(fin_corr4$cluster))){
sub <- subset.data.frame(a, fin_corr4$cluster == i)
sup_sample <- sample(sub,1)
formula.list <- c(formula.list,sup_sample)
}
formula.list
length(unique(fin_corr4$cluster)))
length(unique(fin_corr4$cluster))
subset.data.frame(a, fin_corr4$cluster == 1)
sub <- subset.data.frame(a, fin_corr4$cluster == 1)
sub
sup_sample <- sample(sub,1)
sup_sample
sup_sample <- sample(sub,size = 1)
sup_sample
sub <- subset.data.frame(a, fin_corr4$cluster == 1)
sup_sample <- sample(sub,size = 1)
sup_sample
formula.list <- c()
for (i in 1:length(unique(fin_corr4$cluster))){
a <- data.frame(fin_corr4$cluster)
sub <- subset.data.frame(a, fin_corr4$cluster == 1)
sup_sample <- sample(sub,size = 1)
formula.list <- c(formula.list,sup_sample)
}
formula.list
ub <- subset.data.frame(a, fin_corr4$cluster == 3)
ub
fin_corr4$cluster
a <- dfin_corr4$cluster
a <- fin_corr4$cluster
sub <- subset.data.frame(a, fin_corr4$cluster == 3)
in_corr4$cluster
fin_corr4$cluster
fin_corr4$cluster
a <- fin_corr4$cluster
a
sub <- subset(a, fin_corr4 == 3)
sub <- subset.data.frame(a, fin_corr4 == 3)
sub
formula.list <- c()
for (i in 1:length(unique(fin_corr4$cluster))){
a <- fin_corr4$cluster
sub <- subset.data.frame(a, fin_corr4 == i)
sup_sample <- sample(sub,size = 1)
formula.list <- c(formula.list,sup_sample)
}
formula.list
fin_corr4$cluster
subset.data.frame(a, fin_corr4 == 5)
a <- fin_corr4$cluster
subset.data.frame(a, fin_corr4 == 5)
a <- data.frame(fin_corr4$cluster)
subset.data.frame(a, fin_corr4 == 5)
a
sub <- subset.data.frame(a, ffin_corr4.cluster == 5)
sub
sub <- subset.data.frame(a, ffin_corr4.cluster == 5)
sub
sub <- subset.data.frame(a, fin_corr4.cluster == 5)
sub
sup_sample <- sample(sub,size = 1)
sup_sample
sup_sample <- sample(sub,n = 1)
sup_sample <- sample(sub, 1)
sup_sample
sub <- subset(a, fin_corr4.cluster == 5)
sub
sup_sample <- sample(sub, 1)
up_sample
sup_sample
sub
sub[sample(nrow(sub), 2), ]
sub[sample(nrow(rownames(sub)), 2), ]
rownames(sub[sample(nrow(sub), 2), ])
sup_sample <- sample(sub, 1)
a <- data.frame(fin_corr4$cluster)
a$names <- row.names(a)
a
sub[sample(nrow(sub), 2), ]
nrow(sub)
a <- data.frame(fin_corr4$cluster)
a$names <- row.names(a)
sub <- subset(a, fin_corr4.cluster == 5)
sub[sample(nrow(sub), 2), ]
subsample <- sub[sample(nrow(sub), 2), ]
View(subsample)
formula.list <- vector()
for (i in 1:length(unique(fin_corr4$cluster))){
a <- data.frame(fin_corr4$cluster)
a$names <- row.names(a)
sub <- subset(a, fin_corr4.cluster == 5)
subsample <- sub[sample(nrow(sub), 2), ]
formula.list <- vector(formula.list,subsample$names )
}
a <- data.frame(fin_corr4$cluster)
a$names <- row.names(a)
sub <- subset(a, fin_corr4.cluster == 5)
subsample <- sub[sample(nrow(sub), 2), ]
formula.list <- vector(formula.list,subsample$names )
formula.list <- c(formula.list,subsample$names )
formula.list
formula.list <- vector()
for (i in 1:length(unique(fin_corr4$cluster))){
a <- data.frame(fin_corr4$cluster)
a$names <- row.names(a)
sub <- subset(a, fin_corr4.cluster == i)
subsample <- sub[sample(nrow(sub), 1), ]
formula.list <- c(formula.list,subsample$names )
}
formula.list
fin_corr4$cluster
formula.list <- vector()
for (i in 1:length(unique(fin_corr4$cluster))){
a <- data.frame(fin_corr4$cluster)
a$names <- row.names(a)
sub <- subset(a, fin_corr4.cluster == i)
subsample <- sub[sample(nrow(sub), 1), ]
formula.list <- c(formula.list,subsample$names )
}
formula.list
form1 <- as.formula(paste(measurevar, paste(groupvars, collapse=" + "), sep=" ~ "))
measurevar <- "y"
groupvars  <- formula.list
form1 <- as.formula(paste(measurevar, paste(groupvars, collapse=" + "), sep=" ~ "))
form1
train_formula <- as.formula(paste(measurevar, paste(groupvars, collapse=" + "), sep=" ~ "))
as.character(train_formula)[[2]]
train_formula
[[2]]
library(rpart)
library(Metrics)
library(doParallel)
library(foreach)
library(ggplot2)
random_forest <- function(train_data, train_formula, method="class", feature_per=0.7, cp=0.01, min_split=20, min_bucket=round(min_split/3), max_depth=30, ntrees = 10) {
target_variable <- as.character(train_formula)[[2]]
features <- setdiff(colnames(train_data), target_variable)
n_features <- length(features)
#Parallel processing
ncores <- detectCores(logical=FALSE)
cl <- makeCluster(ncores)
registerDoParallel(cl)
#rf build
rf_model <- foreach(
icount(ntrees),
.packages = c("rpart", "Metrics")
) %dopar% { # parallel processing
bagged_features <- sample(features, n_features * feature_per, replace = FALSE) # KEY!
index_bag <- sample(nrow(train_data), replace=TRUE)
in_train_bag <- train_data[index_bag,]
out_train_bag <- train_data[-index_bag,]
trControl <- rpart.control(minsplit = min_split, minbucket = min_bucket, cp = cp, maxdepth = max_depth)
tree <- rpart(formula = train_formula,
data = in_train_bag,
control = trControl)
oob_pred <- predict(tree, newdata = out_train_bag, type = "class")
oob_acc <- accuracy(actual = out_train_bag[, target_variable], predicted = oob_pred)
list(tree=tree, oob_perf=oob_acc)
}
stopCluster(cl)
rf_model
}
View(Ds)
library(readr)
sdm_data_chukar_copy <- read_csv("~/Dropbox/sdm-data-chukar copy.csv")
View(sdm_data_chukar_copy)
chukar <- sdm_data_chukar_copy[2:44]
train_formula <- as.formula("pts.id ~ .")
train_formula <- as.formula("pts.id ~ .")
forest <- random_forest(train_data = chukar, train_formula = train_formula)
library(doParallel)
install.packages(c("do", "parallel"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(doParallel)
random_forest <- function(train_data, train_formula, method="class", feature_per=0.7, cp=0.01, min_split=20, min_bucket=round(min_split/3), max_depth=30, ntrees = 10) {
target_variable <- as.character(train_formula)[[2]]
features <- setdiff(colnames(train_data), target_variable)
n_features <- length(features)
# #Parallel processing
# ncores <- detectCores(logical=FALSE)
# cl <- makeCluster(ncores)
# registerDoParallel(cl)
#
#rf build
rf_model <- foreach(
icount(ntrees),
.packages = c("rpart", "Metrics")
#) %dopar% { # parallel processing
){
bagged_features <- sample(features, n_features * feature_per, replace = FALSE) # KEY!
index_bag <- sample(nrow(train_data), replace=TRUE)
in_train_bag <- train_data[index_bag,]
out_train_bag <- train_data[-index_bag,]
trControl <- rpart.control(minsplit = min_split, minbucket = min_bucket, cp = cp, maxdepth = max_depth)
tree <- rpart(formula = train_formula,
data = in_train_bag,
control = trControl)
oob_pred <- predict(tree, newdata = out_train_bag, type = "class")
oob_acc <- accuracy(actual = out_train_bag[, target_variable], predicted = oob_pred)
list(tree=tree, oob_perf=oob_acc)
}
stopCluster(cl)
rf_model
}
random_forest <- function(train_data, train_formula, method="class", feature_per=0.7, cp=0.01, min_split=20, min_bucket=round(min_split/3), max_depth=30, ntrees = 10) {
target_variable <- as.character(train_formula)[[2]]
features <- setdiff(colnames(train_data), target_variable)
n_features <- length(features)
# #Parallel processing
# ncores <- detectCores(logical=FALSE)
# cl <- makeCluster(ncores)
# registerDoParallel(cl)
#
#rf build
rf_model <- foreach(
icount(ntrees),
.packages = c("rpart", "Metrics")
#) %dopar% { # parallel processing
)
bagged_features <- sample(features, n_features * feature_per, replace = FALSE) # KEY!
index_bag <- sample(nrow(train_data), replace=TRUE)
in_train_bag <- train_data[index_bag,]
out_train_bag <- train_data[-index_bag,]
trControl <- rpart.control(minsplit = min_split, minbucket = min_bucket, cp = cp, maxdepth = max_depth)
tree <- rpart(formula = train_formula,
data = in_train_bag,
control = trControl)
oob_pred <- predict(tree, newdata = out_train_bag, type = "class")
oob_acc <- accuracy(actual = out_train_bag[, target_variable], predicted = oob_pred)
list(tree=tree, oob_perf=oob_acc)
}
chukar <- sdm_data_chukar_copy[2:44]
train_formula <- as.formula("pts.id ~ .")
forest <- random_forest(train_data = chukar, train_formula = train_formula)
tree <- rpart(formula = train_formula,
data = in_train_bag,
control = trControl)
tree <- rpart(formula = train_formula,
data = in_train_bag,
control = trControl)
forest <- random_forest(train_data = chukar, train_formula = train_formula)
random_forest <- function(train_data, train_formula, method="vector", feature_per=0.7, cp=0.01, min_split=20, min_bucket=round(min_split/3), max_depth=30, ntrees = 10) {
target_variable <- as.character(train_formula)[[2]]
features <- setdiff(colnames(train_data), target_variable)
n_features <- length(features)
# #Parallel processing
# ncores <- detectCores(logical=FALSE)
# cl <- makeCluster(ncores)
# registerDoParallel(cl)
#
#rf build
rf_model <- foreach(
icount(ntrees),
.packages = c("rpart", "Metrics")
#) %dopar% { # parallel processing
)
bagged_features <- sample(features, n_features * feature_per, replace = FALSE) # KEY!
index_bag <- sample(nrow(train_data), replace=TRUE)
in_train_bag <- train_data[index_bag,]
out_train_bag <- train_data[-index_bag,]
trControl <- rpart.control(minsplit = min_split, minbucket = min_bucket, cp = cp, maxdepth = max_depth)
tree <- rpart(formula = train_formula,
data = in_train_bag,
control = trControl)
oob_pred <- predict(tree, newdata = out_train_bag, type = "class")
oob_acc <- accuracy(actual = out_train_bag[, target_variable], predicted = oob_pred)
list(tree=tree, oob_perf=oob_acc)
}
train_formula <- as.formula("pts.id ~ .")
forest <- random_forest(train_data = chukar, train_formula = train_formula)
train_formula <- as.formula(as.factor(pts.id) ~ .)
forest <- random_forest(train_data = chukar, train_formula = train_formula)
library(Metrics)
install.packages("Metrics", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(Metrics)
random_forest <- function(train_data, train_formula, method="vector", feature_per=0.7, cp=0.01, min_split=20, min_bucket=round(min_split/3), max_depth=30, ntrees = 10) {
target_variable <- as.character(train_formula)[[2]]
features <- setdiff(colnames(train_data), target_variable)
n_features <- length(features)
# #Parallel processing
# ncores <- detectCores(logical=FALSE)
# cl <- makeCluster(ncores)
# registerDoParallel(cl)
#
#rf build
rf_model <- foreach(
icount(ntrees),
.packages = c("rpart", "Metrics")
#) %dopar% { # parallel processing
)
bagged_features <- sample(features, n_features * feature_per, replace = FALSE) # KEY!
index_bag <- sample(nrow(train_data), replace=TRUE)
in_train_bag <- train_data[index_bag,]
out_train_bag <- train_data[-index_bag,]
trControl <- rpart.control(minsplit = min_split, minbucket = min_bucket, cp = cp, maxdepth = max_depth)
tree <- rpart(formula = train_formula,
data = in_train_bag,
control = trControl)
oob_pred <- predict(tree, newdata = out_train_bag, type = "class")
oob_acc <- accuracy(actual = out_train_bag[, target_variable], predicted = oob_pred)
list(tree=tree, oob_perf=oob_acc)
}
forest <- random_forest(train_data = chukar, train_formula = train_formula)
train_formula <- as.formula("pts.id" ~ .)
forest <- random_forest(train_data = chukar, train_formula = train_formula)
train_formula <- as.formula(pts.id ~ .)
forest <- random_forest(train_data = chukar, train_formula = train_formula)
random_forest <- function(train_data, train_formula, method="vector", feature_per=0.7, cp=0.01, min_split=20, min_bucket=round(min_split/3), max_depth=30, ntrees = 10) {
target_variable <- as.character(train_formula)[[2]]
features <- setdiff(colnames(train_data), target_variable)
n_features <- length(features)
# #Parallel processing
# ncores <- detectCores(logical=FALSE)
# cl <- makeCluster(ncores)
# registerDoParallel(cl)
#
#rf build
rf_model <- foreach(
icount(ntrees),
.packages = c("rpart", "Metrics")
#) %dopar% { # parallel processing
)
bagged_features <- sample(features, n_features * feature_per, replace = FALSE) # KEY!
index_bag <- sample(nrow(train_data), replace=TRUE)
in_train_bag <- train_data[index_bag,]
out_train_bag <- train_data[-index_bag,]
trControl <- rpart.control(minsplit = min_split, minbucket = min_bucket, cp = cp, maxdepth = max_depth)
tree <- rpart(formula = train_formula,
data = in_train_bag,
control = trControl)
oob_pred <- predict(tree, newdata = out_train_bag, type = "vector")
oob_acc <- accuracy(actual = out_train_bag[, target_variable], predicted = oob_pred)
list(tree=tree, oob_perf=oob_acc)
}
chukar <- sdm_data_chukar_copy[2:44]
train_formula <- as.formula(pts.id ~ .)
forest <- random_forest(train_data = chukar, train_formula = train_formula)
forest
forest$tree
plot(forest$tree)
forest$oob_perf
random_forest <- function(train_data, train_formula, method="vector", feature_per=0.7, cp=0.01, min_split=20, min_bucket=round(min_split/3), max_depth=30, ntrees = 500) {
target_variable <- as.character(train_formula)[[2]]
features <- setdiff(colnames(train_data), target_variable)
n_features <- length(features)
# #Parallel processing
# ncores <- detectCores(logical=FALSE)
# cl <- makeCluster(ncores)
# registerDoParallel(cl)
#
#rf build
rf_model <- foreach(
icount(ntrees),
.packages = c("rpart", "Metrics")
#) %dopar% { # parallel processing
)
bagged_features <- sample(features, n_features * feature_per, replace = FALSE) # KEY!
index_bag <- sample(nrow(train_data), replace=TRUE)
in_train_bag <- train_data[index_bag,]
out_train_bag <- train_data[-index_bag,]
trControl <- rpart.control(minsplit = min_split, minbucket = min_bucket, cp = cp, maxdepth = max_depth)
tree <- rpart(formula = train_formula,
data = in_train_bag,
control = trControl)
oob_pred <- predict(tree, newdata = out_train_bag, type = "vector")
oob_acc <- accuracy(actual = out_train_bag[, target_variable], predicted = oob_pred)
list(tree=tree, oob_perf=oob_acc)
}
forest <- random_forest(train_data = chukar, train_formula = train_formula)
forest
fit <- rpart(id.pts ~.,
method="class", data=Ds)
fit <- rpart(pts.id ~.,
method="class", data=chukar)
fit
plot(fit)
Ds <- A_chukar_Variables_WA_24K
df<-DS
df<-Ds
corr <- cor(df)
library(readr)
sdm_data_chukar_copy <- read_csv("~/Dropbox/sdm-data-chukar copy.csv")
View(sdm_data_chukar_copy)
Ds <- sdm_data_chukar_copy
df <- Ds
df <- Ds[4:44]
corr <- cor(df)
par(mar=c(2,2,2,2))
corrplot(corr, order = "hclust", hclust.method = "centroid")
gap_corr <- clusGap(corr, FUN = kmeans, nstart = 25, K.max =18 , B = 10) # 21 #7
fviz_gap_stat(gap_corr)
gap.stat <- fviz_gap_stat(gap_corr)
gap.stat$layers
gap.stat$scales
gap.stat$labels
wss_corr <- fviz_nbclust(corr, kmeans, method = "wss")  # 4(?) #2 or 3
summary(wss_corr)
wss_corr <- fviz_nbclust(corr, kmeans, method = "wss")  # 4(?) #2 or 3
wss_corr
length(wss_corr)
wss_corr$layers
wss_corr$coordinates
wss_corr$labels
gap_stat <- clusGap(df, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
gap_stat
df
corr
length(corr)
41*41
dim(corr)
(legnth(corr))^(1/2)
(length(corr))^(1/2)
set.seed(123)
gap_stat <- clusGap(corr, FUN = kmeans, nstart = 25,
K.max = (length(corr))^(1/2), B = 50)
nrow(corr)
nrow(corr)-1
gap_stat <- clusGap(corr, FUN = kmeans, nstart = 25,
K.max = nrow(corr)-1, B = 50)
gap_stat
gap_stat$n
gap_stat
gap_stat$Tab
gap_stat$call
gap_stat$spaceH0
gap_stat$B
gap_stat
gap_corr <- clusGap(corr, FUN = kmeans, nstart = 25, K.max =nrow(corr)-1 , B = 50) # 21 #7
gap_corr
gap_stat <- clusGap(corr, FUN = kmeans, nstart = 25,
K.max = nrow(corr)-1, B = 50)
gap_stat
fin_corr <- kmeans(corr, centers = 9, nstart = 25)
fin_corr
fin_corr$cluster
formula.list <- vector()
for (i in 1:length(unique(fin_corr$cluster))){
a <- data.frame(fin_corr$cluster)
a$names <- row.names(a)
sub <- subset(a, fin_corr.cluster == i)
subsample <- sub[sample(nrow(sub), 1), ]
formula.list <- c(formula.list,subsample$names )
}
formula.list
measurevar <- "y"
groupvars  <- formula.list
groupvars
corr
Ds <- sdm_data_chukar_copy
df <- Ds[4:43]
library(corrplot)
corr <- cor(df)
par(mar=c(2,2,2,2))
corrplot(corr, order = "hclust", hclust.method = "centroid")
set.seed(123)
gap_stat <- clusGap(corr, FUN = kmeans, nstart = 25,
K.max = nrow(corr)-1, B = 10)
gap_stat
fin_corr$cluster <- kmeans(corr, centers = 15, nstart = 25)
fin_corr<- kmeans(corr, centers = 15, nstart = 25)
fin_corr
formula.list <- vector()
for (i in 1:length(unique(fin_corr$cluster))){
a <- data.frame(fin_corr$cluster)
a$names <- row.names(a)
sub <- subset(a, fin_corr.cluster == i)
subsample <- sub[sample(nrow(sub), 1), ]
formula.list <- c(formula.list,subsample$names )
}
formula.list
measurevar <- "pts.id"
train_formula <- as.formula(paste(measurevar, paste(formula.list, collapse=" + "), sep=" ~ "))
train_formula
train_data <- df
target_variable <- "pts.id"
features <- setdiff(colnames(train_data), target_variable)
features
n_features <- length(features)
n_features
index_bag <- sample(nrow(train_data), replace=TRUE)
index_bag
in_train_bag <- train_data[index_bag,]
in_train_bag
out_train_bag <- train_data[-index_bag,]
out_train_bag
bagged_features <- sample(features, n_features * feature_per, replace = FALSE) # KEY!
bagged_features <- sample(features, n_features * 0.7, replace = FALSE) # KEY!
bagged_features
fin_corr
fin_corr$cluster
method
icount(ntrees)
a <- runif(1)
b <- runif(1)
setwd("~/Documents/GitHub/academic-website")
