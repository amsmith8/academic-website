)
model.GBM
model.GBM <- train( Chukar.Occurrence ~ . ,
data = train.Data ,
method = "gbm" ,
trControl = TrainingParameters,
ClassProbs =  TRUE ,
preProcess = c( "scale", "center" ) )
model.GBM
model.GBM <- train( Chukar.Occurrence ~ . ,
data = train.Data ,
method = "gbm" ,
trControl = TrainingParameters,
preProcess = c( "scale", "center" ) )
model.GBM
summary ( GBM )
summary ( model.GBM )
plot( varImp( model.GBM), main = "Variable importance " , ylab = "Variables" )
test.GBM <- predict( GBM , newdata = test.Data )
test.GBM
test.GBM <- predict( model.GBM , newdata = test.Data )
test.GBM
cm.GBM <- confusionMatrix( table( test.GBM , test.Data$Chukar.Occurrence ) )
cm.GBM
save.image("~/Dropbox/GitHub Environment 2:20.RData")
elevation <- raster("/Users/austinsmith/Downloads/ETOPO1_Bed_g_geotiff.tif")
options(error)
install.packages("coronavirus")
library(coronavirus)
update_dataset()
Y
x <- update_dataset()
covid19_df <- refresh_coronavirus_jhu()
covid19_df <- refresh_coronavirus_jhu()
library(readr)
latestdata <- read_csv("Documents/GitHub/nCoV2019/latest_data/latestdata.csv")
View(latestdata)
install.packages("covid19.analytics")
library(covid19.analytics)
x <- covid19.JHU.data(case = "aggregated")
View(x)
y <- covid19.data(case = "aggregated")
View(y)
y <- covid19.data(case ="ts-ALL" )
View(y)
library(raster)
pop.dens <- raster("/Users/austinsmith/Downloads/gpw-v4-population-density-rev11_2020_30_sec_tif/gpw_v4_population_density_rev11_2020_30_sec.tif")
plot(pop.dens)
Netherlands.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Netherlands") %>%
select(date, province, cases)
library(coronavirus)
data("coronavirus")
require(dplyr)
Confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country != "Australia") %>%
filter(country != "Canada") %>%
filter(country != "China") %>%
filter(country != "Denmark") %>%
filter(country != "France") %>%
filter(country != "Netherlands") %>%
filter(country != "United Kingdom") %>%
select(date, country, cases) %>%
spread(key = country, value = cases)
require(dplyr)
library(dplyr)
library(tidyverse)
Confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country != "Australia") %>%
filter(country != "Canada") %>%
filter(country != "China") %>%
filter(country != "Denmark") %>%
filter(country != "France") %>%
filter(country != "Netherlands") %>%
filter(country != "United Kingdom") %>%
select(date, country, cases) %>%
spread(key = country, value = cases)
View(coronavirus)
# Australia
Australia.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Australia") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(Australia = rowSums(.[,-1],na.rm = TRUE))
View(Australia.confirmed)
# Canada
Canada.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Canada") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(Canada = rowSums(.[,-1],na.rm = TRUE))
United Kingdom.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "United Kingdom") %>%
select(date, province, cases)
United Kingdom.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "United Kingdom")
United Kingdom.confirmed <- coronavirus
UK.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "United Kingdom") %>%
select(date, province, cases)
View(UK.confirmed)
# China
China.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "China") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(China = rowSums(.[,-1],na.rm = TRUE))
View(China.confirmed)
Denmark.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark") %>%
select(date, province, cases)
View(Denmark.confirmed)
Denmark.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark") %>%
filter(country != "Faroe Islands") %>%
filter(country != "Greenland") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(Denmark = rowSums(.[,-1],na.rm = TRUE))
Denmark.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark")
View(Denmark.confirmed)
Denmark.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark") %>%
filter(province != "Faroe Islands") %>%
filter(province != "Greenland") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(Denmark = rowSums(.[,-1],na.rm = TRUE))
Denmark.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark")
Denmark.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark") %>%
filter(province != "Faroe Islands")
Denmark.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark") %>%
filter(province != "Faroe Islands") %>%
filter(province != "Greenland")
View(Denmark.confirmed)
# FAROE ISLANDS
FRO.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark") %>%
filter(province == "Faroe Islands")
View(FRO.confirmed)
# FAROE ISLANDS
FRO.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark") %>%
filter(province == "Faroe Islands") %>%
select(date, cases)
View(FRO.confirmed)
# FAROE ISLANDS
FRO.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark") %>%
filter(province == "Faroe Islands") %>%
select(date, cases) %>%
colnames(FRO.confirmed) <- c("date", "Faroe Islands")
# FAROE ISLANDS
FRO.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark") %>%
filter(province == "Faroe Islands") %>%
select(date, cases)
colnames(FRO.confirmed) <- c("date", "Faroe Islands")
View(FRO.confirmed)
# Greenland
GRL.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark") %>%
filter(province == "Greenland") %>%
select(date, cases)
Denmark.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark")
View(Denmark.confirmed)
# Denmark
Denmark.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark") %>%
filter(province != "Faroe Islands") %>%
filter(province != "Greenland") %>%
select(date, cases)
View(Denmark.confirmed)
France.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "France") %>%
select(date, province, cases) %>%
spread(key = province, value = cases)
View(France.confirmed)
Denmark.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark")
%>%
spread(key = province, value = cases)
# Denmark
Denmark.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Denmark") %>%
# filter(province != "Faroe Islands") %>%
# filter(province != "Greenland") %>%
select(date, province, cases) %>%
spread(key = province, value = cases)
View(Denmark.confirmed)
colnames(Denmark.confirmed[,2]) <- c("Denmark")
Denmark.confirmed[,2]
colnames(Denmark.confirmed[,2]) <- "Denmark"
colnames(Denmark.confirmed) <- c("date", "Denmark", "Faroe Islands", "Greenland")
France.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "France") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
rename(V1 = France)
France.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "France") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
rename(V1 = "France")
names(France.confirmed)[2] <- "France"
Netherlands.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Netherlands")
View(Netherlands.confirmed)
Netherlands.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Netherlands") %>%
select(date, province, cases) %>%
spread(key = province, value = cases)
names(Netherlands.confirmed)[2] <- "Netherlands"
View(Netherlands.confirmed)
UK.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "United Kingdom") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
names(UK.confirmed)[2] <- "UK"
UK.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "United Kingdom") %>%
select(date, province, cases) %>%
spread(key = province, value = cases)
names(UK.confirmed)[2] <- "UK"
View(UK.confirmed)
View(China.confirmed)
# China
China.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "China") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(China = rowSums(.[,-1],na.rm = TRUE)) %>%
select(date, China)
Canada.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Canada") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(Canada = rowSums(.[,-1],na.rm = TRUE))
View(Canada.confirmed)
# Canada
Canada.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Canada") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(Canada = rowSums(.[,-1],na.rm = TRUE)) %>%
select(date, Canada)
# Australia
Australia.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Australia") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(Australia = rowSums(.[,-1],na.rm = TRUE))
View(Australia.confirmed)
# Australia
Australia.confirmed <- coronavirus %>%
filter(type == "confirmed") %>%
filter(country == "Australia") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(Australia = rowSums(.[,-1],na.rm = TRUE)) %>%
select(date, Australia)
View(Australia.confirmed)
a <- inner_join(Netherlands.confirmed , UK.confirmed, by = "date")
View(a)
a2 <- inner_join(Confirmed, Australia.confirmed, Canada.confirmed, China.confirmed, Denmark.confirmed,
France.confirmed, Netherlands.confirmed, UK.confirmed,  by = "date")
a2<- merge(France.confirmed,UK.confirmed, by = "date" )
View(a2)
multiFull <- merge(merge(merge(merge(
Confirmed,
Australia.confirmed, by = "date"),
Canada.confirmed, by = "date"),
China.confirmed, by = "date"),
Denmark.confirmed, by = "date")
View(multiFull)
a <- merge(merge(merge(merge(merge(merge(merge(
Confirmed,
Australia.confirmed, by = "date"),
Canada.confirmed, by = "date"),
China.confirmed, by = "date"),
Denmark.confirmed, by = "date"),
France.confirmed, by = "date"),
Netherlands.confirmed, by = "date"),
UK.confirmed, by = "date")
View(a)
cases.global[,order(colnames(cases.global))]
cases.global <- merge(merge(merge(merge(merge(merge(merge(
Confirmed,
Australia.confirmed, by = "date"),
Canada.confirmed, by = "date"),
China.confirmed, by = "date"),
Denmark.confirmed, by = "date"),
France.confirmed, by = "date"),
Netherlands.confirmed, by = "date"),
UK.confirmed, by = "date")
cases.global[,order(colnames(cases.global))]
df %>% select(noquote(order(colnames(cases.global))))
df<- cases.global
df[,-1][,order(colnames(df[,-1]))]
View(df)
cases.ordered<- cases.global[,-1][,order(colnames(cases.global[,-1]))]
View(cases.ordered)
cases.global2 <- cbind(cases.global.dates, cases.ordered)
cases.global.dates <- cases.global[,1]
cases.global2 <- cbind(cases.global.dates, cases.ordered)
View(cases.global2)
names(cases.global2)[1] <- "date"
View(cases.global2)
View(coronavirus)
#Extract
Death <- coronavirus %>%
filter(type == "death") %>%
filter(country != "Australia") %>%
filter(country != "Canada") %>%
filter(country != "China") %>%
filter(country != "Denmark") %>%
filter(country != "France") %>%
filter(country != "Netherlands") %>%
filter(country != "United Kingdom") %>%
select(date, country, cases) %>%
spread(key = country, value = cases)
View(Death)
Death <- coronavirus %>%
filter(type == "death")
#Extract
Death <- coronavirus %>%
filter(type == "death") %>%
filter(country != "Australia") %>%
filter(country != "Canada") %>%
filter(country != "China") %>%
filter(country != "Denmark") %>%
filter(country != "France") %>%
filter(country != "Netherlands") %>%
filter(country != "United Kingdom") %>%
select(date, country, cases) %>%
spread(key = country, value = cases)
View(Death)
fatalities.global <- merge(merge(merge(merge(merge(merge(merge(
Death,
Australia.death, by = "date"),
Canada.death, by = "date"),
China.death, by = "date"),
Denmark.death, by = "date"),
France.death, by = "date"),
Netherlands.death, by = "date"),
UK.death, by = "date")
# Australia
Australia.death <- coronavirus %>%
filter(type == "death") %>%
filter(country == "Australia") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(Australia = rowSums(.[,-1],na.rm = TRUE)) %>%
select(date, Australia)
# Canada
Canada.death <- coronavirus %>%
filter(type == "death") %>%
filter(country == "Canada") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(Canada = rowSums(.[,-1],na.rm = TRUE)) %>%
select(date, Canada)
# China
China.death <- coronavirus %>%
filter(type == "death") %>%
filter(country == "China") %>%
select(date, province, cases) %>%
spread(key = province, value = cases) %>%
mutate(China = rowSums(.[,-1],na.rm = TRUE)) %>%
select(date, China)
# Denmark & provinces
Denmark.death <- coronavirus %>%
filter(type == "death") %>%
filter(country == "Denmark") %>%
select(date, province, cases) %>%
spread(key = province, value = cases)
names(France.death)[2] <- "Denmark"
# Denmark & provinces
Denmark.death <- coronavirus %>%
filter(type == "death") %>%
filter(country == "Denmark") %>%
select(date, province, cases) %>%
spread(key = province, value = cases)
names(Denmark.death)[2] <- "Denmark"
# France & provinces
France.death <- coronavirus %>%
filter(type == "death") %>%
filter(country == "France") %>%
select(date, province, cases) %>%
spread(key = province, value = cases)
names(France.death)[2] <- "France"
# Netherlands & provinces
Netherlands.death <- coronavirus %>%
filter(type == "death") %>%
filter(country == "Netherlands") %>%
select(date, province, cases) %>%
spread(key = province, value = cases)
names(Netherlands.death)[2] <- "Netherlands"
# United Kingdom & provinces
UK.death <- coronavirus %>%
filter(type == "death") %>%
filter(country == "United Kingdom") %>%
select(date, province, cases) %>%
spread(key = province, value = cases)
names(UK.death)[2] <- "UK"
fatalities.global <- merge(merge(merge(merge(merge(merge(merge(
Death,
Australia.death, by = "date"),
Canada.death, by = "date"),
China.death, by = "date"),
Denmark.death, by = "date"),
France.death, by = "date"),
Netherlands.death, by = "date"),
UK.death, by = "date")
fatalities.global.dates <- fatalities.global[,1]
fatalities.ordered<- fatalities.global[,-1][,order(colnames(fatalities.global[,-1]))]
fatalities.global <- cbind(fatalities.global.dates, fatalities.ordered)
names(fatalities.global)[1] <- "date"
View(fatalities.global)
fatalities.global %>%
tibbletime::as_tbl_time(index=date) %>%
mutate(Total = rowSums(.[,-1],na.rm = TRUE))
View(fatalities.global)
fatalities.global %>%
tibbletime::as_tbl_time(index=date) %>%
mutate(Total = rowSums(.[,-1],na.rm = TRUE))
fatalities.global
fatalities.global <- fatalities.global %>%
tibbletime::as_tbl_time(index=date) %>%
mutate(Global = rowSums(.[,-1],na.rm = TRUE))
View(fatalities.global)
DATA PREPROCESS
# Chukar range polygon file
Ac_poly <- readShapePoly( "/Users/austinsmith/Documents/SDM_spatial_data/Bird_life_galliformes_fgip/Alectoris_chukar/Alectoris_chukar.shp" ) # via Bird Life
crs( Ac_poly ) <- Model_CRS
### Seperate the polygon into native and naturalized regions
native <- subset( Ac_poly , Ac_poly$OBJECTID == 36 )  # historical  native range for A. chukar. Similar to Christensen 1970
naturalized <- subset( Ac_poly, Ac_poly$OBJECTID != 36 ) # recognized regions of naturalized populations
source( "R_script/Global-covariate-prep.R" )
Model_CRS <- crs( super_stack )
library("dismo")
library( "maptools" )
library( "rgdal" )
library( "rgeos" )
library( "sp" )
library( "tictoc" )
# remove unnecessary objects
rm(bioclim_list,bioclim_stack,topo_list,topo_stack)
# DATA PREPROCE
Ac_poly <- readShapePoly( "/Users/austinsmith/Documents/SDM_spatial_data/Bird_life_galliformes_fgip/Alectoris_chukar/Alectoris_chukar.shp" ) # via Bird Life
crs( Ac_poly ) <- Model_CRS
galliform_data <- read.csv("/Users/austinsmith/Dropbox/reduced.galliform.numbers")
View(galliform_data)
View(galliform_data)
galliform_data <- read.csv("/Users/austinsmith/Dropbox/reduced.galliform.csv")
View(galliform_data)
galliform_data <- read.csv("/Users/austinsmith/Downloads/0110299-200613084148143.csv")
galliform_data <- read.csv("/Users/austinsmith/Dropbox/galliForm_reduced.csv")
View(galliform_data)
View(galliform_data)
colnames( galliform_data ) <- c( "species" , "lat", "long", "year" )
species_list <- unique(galliform_data$species)
species_list
count.fields(galliform_data$species)
count.fields(species_list)
library(plyr)
count(galliform_data$species)
counts <- count(galliform_data$species)
View(counts)
subset(counts$freq >= 100)
setwd("~/Documents/GitHub/academic-website")
