install.packages("dismo")
install.packages("caret")
install.packages("randomForest")
install.packages("nnet")
install.packages("caretEnsemble")
library("blockCV")
# Upload packages and files
library("caret")
library("dismo")
library("rgdal")
library("raster")
library("ROSE")
library("tictoc")
library("dplyr")
source("R/Functions.R")
source("R/Functions.R")
#---------------------------------------------------------------------------------------------
### DATA PREP
#---------------------------------------------------------------------------------------------
# Input values
filename = "./Data/data_raw/Sales_et_al_2017_boar.csv"
species_type <- "Boar"
alt <- raster( "/Users/amsmith/Documents/WC2_for_deep_learning/wc2.1_2.5m_elev.tif" )
environmental_data <- stack( list_to_stack( list.files( path = "/Users/amsmith/Documents/WC2_for_deep_learning/wc2",full.names= TRUE, pattern = ".tif") ), alt ) # adds 'alt' to bioclim stack
backgr.n = 10000
buffers <- list(  1e+6 , "global" )
buffer_names <- c( "1000km" , "global" )
seed <- 323
species_pts <- species_points( filename , environmental_data , backgr.n = backgr.n , buffer = buffers[[2]] , seed = seed )
source("R/Functions.R")
setwd("/Volumes/LaCie/Time-series-sdms")
source("R/Functions.R")
species_pts <- species_points( filename , environmental_data , backgr.n = backgr.n , buffer = buffers[[2]] , seed = seed )
Input values
filename = "./Data/data_raw/Sales_et_al_2017_boar.csv"
species_type <- "Boar"
alt <- raster( "/Users/amsmith/Documents/WC2_for_deep_learning/wc2.1_2.5m_elev.tif" )
environmental_data <- stack( list_to_stack( list.files( path = "/Users/amsmith/Documents/WC2_for_deep_learning/wc2",full.names= TRUE, pattern = ".tif") ), alt ) # adds 'alt' to bioclim stack
backgr.n = 10000
buffers <- list(  1e+6 , "global" )
buffer_names <- c( "1000km" , "global" )
seed <- 323
species_pts <- species_points( filename , environmental_data , backgr.n = backgr.n , buffer = buffers[[2]] , seed = seed )
View(species_pts)
sb <- spatialBlock(speciesData = species_pts,
species = "Presence",
rasterLayer = alt,
#theRange = 70000, # size of the blocks
k = 5 ,
#rows = 6 , selection = "checkerboard",
selection = "random",
iteration = 100, # find evenly dispersed folds
#biomod2Format = TRUE,
)
pa_data <- st_as_sf( species_pts , coords = c( "long" , "lat" ) , crs = crs( alt  ) )
sb <- spatialBlock(speciesData = pa_data,
species = "Presence",
rasterLayer = alt,
#theRange = 70000, # size of the blocks
k = 5 ,
#rows = 6 , selection = "checkerboard",
selection = "random",
iteration = 100, # find evenly dispersed folds
#biomod2Format = TRUE,
)
View(pa_data)
sb <- buffering(speciesData = pa_data,
species = "Presence",
rasterLayer = alt,
#theRange = 70000, # size of the blocks
k = 5 ,
spDataType = "PB",
#rows = 6 , selection = "checkerboard",
selection = "random",
iteration = 100, # find evenly dispersed folds
#biomod2Format = TRUE,
)
sb <- buffering(speciesData = pa_data,
species = "Presence",
#rasterLayer = alt,
#theRange = 70000, # size of the blocks
#k = 5 ,
spDataType = "PB",
#rows = 6 , selection = "checkerboard",
#selection = "random",
#iteration = 100, # find evenly dispersed folds
#biomod2Format = TRUE,
)
sb <- buffering(speciesData = pa_data,
species = "Presence",
#rasterLayer = alt,
theRange = 70000, # size of the blocks
#k = 5 ,
spDataType = "PB",
#rows = 6 , selection = "checkerboard",
#selection = "random",
#iteration = 100, # find evenly dispersed folds
#biomod2Format = TRUE,
)
View(sb)
data
data1 <- read.csv( filename )
data1
kmeans(data1, 5)
a <- kmeans(data1, 5)
plot(a)
View(a)
plot(data1 , col = a$cluster)
a <- kmeans(data1, 10)
plot(data1 , col = a$cluster)
a$size
a <- kmeans(data1, 5)
plot(data1 , col = a$cluster)
a$size
install.packages("scclust")
library(scclust)
data1
length(data1)
nrow(data1)
nrow(data1)/5
florr(nrow(data1)/5)
floor(nrow(data1)/5)
n_clusters <- 5
floor( nrow( data1 ) / n_clusters )
n_instances <- floor( nrow( data1 ) / n_clusters )
my_clustering <- sc_clustering( data1 , n_instances )
data1$id <- 1
View(data1)
my_dist <- distances(data1,
id_variable = "id",
dist_variables = c( "long" , "lat" ) )
my_clustering <- sc_clustering( data1 , n_instances )
my_clustering <- sc_clustering( my_dist , n_instances )
my_clustering
plot(data1 , col = my_clustering)
data1 <- read.csv( filename )
rdesc = makeResampleDesc("SpRepCV", folds = 5, reps = 4)
resamp = resample(makeLearner("classif.qda"), data1, rdesc)
library(mlr)
rdesc = makeResampleDesc("SpRepCV", folds = 5, reps = 4)
resamp = resample(makeLearner("classif.qda"), data1, rdesc)
resamp = resample(makeClusterTask("classif.qda"), data1, rdesc)
resamp = resample(makeClusterTask(data1), data1, rdesc)
resamp = resample(makeClusterTask(id = deparse(substitute(data)),data1), data1, rdesc)
data1$id <- 1
eb <- envBlock(rasterLayer = alt,
speciesData = data1
species = "id",
k = 5,
standardization = "standard", # rescale variables between 0 and 1
rasterBlock = FALSE,
numLimit = 50)
eb <- envBlock(rasterLayer = alt,
speciesData = data1 ,
species = "id",
k = 5,
standardization = "standard", # rescale variables between 0 and 1
rasterBlock = FALSE,
numLimit = 50)
species_pts
environmental_data <- stack( list_to_stack( list.files( path = "/Users/amsmith/Documents/WC2_for_deep_learning/wc2",full.names= TRUE, pattern = ".tif") ), alt ) # adds 'alt' to bioclim stack
aa <- extract(environmental_data  ,  species_pts[,1:2]
)
data1
AA <- extract(environmental_data  ,  data1[,1:2]
)
AA
data1
Z <- rbind(data1[,3] , AA)
data1[,3]
Z <- cbind(data1[,3] , AA)
pa_data <- st_as_sf( data1 , coords = c( "long" , "lat" ) , crs = crs( alt  ) )
rangeExplorer(alt, pa_data)
pa_data <- st_as_sf( z , coords = c( "long" , "lat" ) , crs = crs( alt  ) )
pa_data <- st_as_sf( Z , coords = c( "long" , "lat" ) , crs = crs( alt  ) )
Z
Z <- as.data.frame(Z)
View(Z)
pa_data <- st_as_sf( Z , coords = c( "long" , "lat" ) , crs = crs( alt  ) )
Z <- cbind(data1, AA)
Z <- as.data.frame(Z)
pa_data <- st_as_sf( Z , coords = c( "long" , "lat" ) , crs = crs( alt  ) )
eb <- envBlock(rasterLayer = alt,
speciesData = Z ,
species = "id",
k = 5,
standardization = "standard", # rescale variables between 0 and 1
rasterBlock = FALSE,
numLimit = 50)
pa_data <- st_as_sf( Z , coords = c( "long" , "lat" ) , crs = crs( alt  ) )
eb <- envBlock(rasterLayer = alt,
speciesData = pa_data ,
species = "id",
k = 5,
standardization = "standard", # rescale variables between 0 and 1
rasterBlock = FALSE,
numLimit = 50)
plot(alt)
plot(data1)
plot(data1[,1:2])
plot(alt)
points(data1[,1:2])
eb <- envBlock(rasterLayer = environmental_data,
speciesData = pa_data ,
species = "id",
k = 5,
standardization = "standard", # rescale variables between 0 and 1
rasterBlock = FALSE,
numLimit = 50)
W <- arrange(data1 , long)
View(W)
floor(nrow(data1)/5)
col =
partition size = floor(nrow(data1)/5)
partition_size = floor(nrow(data1)/5)
b <- c( partition_size , partition_size*2 , partition_size*3 , partition_size*4 , Inf)
b
col = c( rep("red", 267) ,
rep("blue", 267) ,
rep("forestgreen", 267) ,
rep("black", 267) ,
rep("goldenrod", 267) )
plot(W, col =col)
plot(W[,1:2], col =col)
plot(alt)
points(W[,1:2], col =col)
library(maptools)
data("wrld_simpl")
plot(wrld_simpl)
points(W[,1:2], col =col)
col = c( rep("red", 267) ,
rep("blue", 267) ,
rep("forestgreen", 267) ,
rep("black", 267) ,
rep("cyan", 267) )
plot(wrld_simpl)
points(W[,1:2], col =col)
col = c( rep("red", 267) ,
rep("blue", 267) ,
rep("forestgreen", 267) ,
rep("yellow", 267) ,
rep("cyan", 267) )
plot(wrld_simpl)
points(W[,1:2], col =col)
data1
# Input values
filename = "./Data/data_raw/Sales_et_al_2017_boar.csv"
data1 <- read.csv( filename )
data2 <- arrange( data1 , long )
k = 5
chunk <- partition_size
partition_size = floor( nrow( data2 ) / k )
chunk <- partition_size
n <- nrow(data2)
r  <- rep(1:ceiling(n/chunk),each=chunk)[1:n]
d <- split(data2,r)
View(d)
View(d)
r  <- rep( 1:floor( n / chunk ) , each=chunk)[ 1:n ]
d <- split( data2 , r )
View(d)
View(d)
d[[1]]
d[[5]] <- d[[5]] + d[[6]]
r  <- rep( 1:ceiling( n / chunk ) , each=chunk)[ 1:n ]
d <- split( data2 , r )
d[[5]] <- d[[5]] + d[[6]]
d[[5]] <- cbind( d[[5]] , d[[6]] ]
d[[5]] <- cbind( d[[5]] , d[[6]] )
d[[5]] <- rbind( d[[5]] , d[[6]] )
View(d)
dim(d)
length(d)
# Input values
filename = "./Data/data_raw/Sales_et_al_2017_boar.csv"
data1 <- read.csv( filename )
data2 <- arrange( data1 , long )
k = 5
partition_size = floor( nrow( data2 ) / k )
chunk <- partition_size
n <- nrow( data2 )
r  <- rep( 1:ceiling( n / chunk ) , each=chunk)[ 1:n ]
d <- split( data2 , r )
if ( length( d ) = k + 1 ){
d[[ k ]] <- rbind( d[[ k ]] , d[[ k+1 ]] )
}
View(d)
d[k+1] <- NULL
View(d)
d[[ k ]]
d[1]
k_folds_list <- function( df , k_folds ) {
partition_size = floor( nrow( data2 ) / k_folds )
n <- nrow( df )
r  <- rep( 1:ceiling( n / partition_size ) , each = partition_size )[ 1:n ]
d <- split( df , r )
if ( length( d ) = k_folds + 1 ){
d[ k_folds ] <- rbind( d[ k_folds ] , d[ k_folds + 1 ] )
d[ k_folds + 1 ] <- NULL
}
}
k_folds_list <- function( df , k_folds ) {
partition_size <- floor( nrow( data2 ) / k_folds )
n <- nrow( df )
r  <- rep( 1:ceiling( n / partition_size ) , each = partition_size )[ 1:n ]
d <- split( df , r )
if ( length( d ) == k_folds + 1 ){
d[ k_folds ] <- rbind( d[ k_folds ] , d[ k_folds + 1 ] )
d[ k_folds + 1 ] <- NULL
}
}
A <- k_folds_list (data2 , 5)
k_folds_list <- function( df , k_folds ) {
partition_size <- floor( nrow( data2 ) / k_folds )
n <- nrow( df )
r  <- rep( 1:ceiling( n / partition_size ) , each = partition_size )[ 1:n ]
d <- split( df , r )
if ( length( d ) > k_folds  ){
d[ k_folds ] <- rbind( d[ k_folds ] , d[ k_folds + 1 ] )
d[ k_folds + 1 ] <- NULL
}
}
A <- k_folds_list (data2 , 5)
d[ k_folds + 1 ]
A <- k_folds_list (df = data2 , k_folds = K_folds )
A <- k_folds_list (df = data2 , k_folds = k_folds )
k_folds = 5
A <- k_folds_list (df = data2 , k_folds = k_folds )
# Input values
filename = "./Data/data_raw/Sales_et_al_2017_boar.csv"
df <- read.csv( filename )
df <- arrange( df , long )
k_folds = 5
partition_size = floor( nrow( data2 ) / k_folds )
partition_size = floor( nrow( df ) / k_folds )
# Input values
filename = "./Data/data_raw/Sales_et_al_2017_boar.csv"
df <- read.csv( filename )
df <- arrange( df , long )
k_folds = 5
partition_size = floor( nrow( df ) / k_folds )
n <- nrow( df )
r  <- rep( 1:ceiling( n / partition_size ) , each = partition_size )[ 1:n ]
d <- split( df , r )
if ( length( d ) = k_folds + 1 ){
d[ k_folds ] <- rbind( d[ k_folds ] , d[ k_folds + 1 ] )
d[ k_folds + 1 ] <- NULL
}
if ( length( d ) = k_folds + 1 ){
d[[k_folds ]] <- rbind( d[[ k_folds ]] , d[[ k_folds + 1 ]] )
d[[ k_folds + 1 ]] <- NULL
}
View(d)
# Input values
filename = "./Data/data_raw/Sales_et_al_2017_boar.csv"
df <- read.csv( filename )
df <- arrange( df , long )
k_folds = 5
partition_size = floor( nrow( df ) / k_folds )
n <- nrow( df )
r  <- rep( 1:ceiling( n / partition_size ) , each = partition_size )[ 1:n ]
d <- split( df , r )
if ( length( d ) = k_folds + 1 ){
d[[k_folds ]] <- rbind( d[[ k_folds ]] , d[[ k_folds + 1 ]] )
d[[ k_folds + 1 ]] <- NULL
}
length( d )
k_folds + 1
# Input values
filename = "./Data/data_raw/Sales_et_al_2017_boar.csv"
df <- read.csv( filename )
df <- arrange( df , long )
k_folds = 5
partition_size = floor( nrow( df ) / k_folds )
n <- nrow( df )
r  <- rep( 1:ceiling( n / partition_size ) , each = partition_size )[ 1:n ]
d <- split( df , r )
length( d )
if ( length( d ) == k_folds + 1 ){
d[[k_folds ]] <- rbind( d[[ k_folds ]] , d[[ k_folds + 1 ]] )
d[[ k_folds + 1 ]] <- NULL
}
View(d)
k_folds_list <- function( df , k_folds ) {
partition_size <- floor( nrow( df ) / k_folds )
n <- nrow( df )
r  <- rep( 1:ceiling( n / partition_size ) , each = partition_size )[ 1:n ]
d <- split( df , r )
if ( length( d ) == k_folds + 1 ){
d[[k_folds ]] <- rbind( d[[ k_folds ]] , d[[ k_folds + 1 ]] )
d[[ k_folds + 1 ]] <- NULL
}
}
A <- k_folds_list (df = df , k_folds = k_folds )
k_folds
df
k_folds_list <- function( df , k_folds ) {
df <- df
partition_size <- floor( nrow( df ) / k_folds )
n <- nrow( df )
r  <- rep( 1:ceiling( n / partition_size ) , each = partition_size )[ 1:n ]
d <- split( df , r )
if ( length( d ) == k_folds + 1 ){
d[[k_folds ]] <- rbind( d[[ k_folds ]] , d[[ k_folds + 1 ]] )
d[[ k_folds + 1 ]] <- NULL
}
}
A <- k_folds_list ( df = df , k_folds = k_folds )
k_folds_list <- function( df , k_folds ) {
partition_size <- floor( nrow( df ) / k_folds )
n <- nrow( df )
r  <- rep( 1:ceiling( n / partition_size ) , each = partition_size )[ 1:n ]
d <- split( df , r )
# if ( length( d ) == k_folds + 1 ){
#   d[[k_folds ]] <- rbind( d[[ k_folds ]] , d[[ k_folds + 1 ]] )
#   d[[ k_folds + 1 ]] <- NULL
# }
}
A <- k_folds_list ( df = df , k_folds = k_folds )
k_folds_list <- function( df , k_folds ) {
partition_size <- floor( nrow( df ) / k_folds )
n <- nrow( df )
r  <- rep( 1:ceiling( n / partition_size ) , each = partition_size )[ 1:n ]
d <- split( df , r )
if ( length( d ) == k_folds + 1 ){
d[[k_folds ]] <- rbind( d[[ k_folds ]] , d[[ k_folds + 1 ]] )
#d[[ k_folds + 1 ]] <- NULL
}
}
A <- k_folds_list ( df = df , k_folds = k_folds )
View(A)
k_folds_list <- function( df , k_folds ) {
partition_size <- floor( nrow( df ) / k_folds )
n <- nrow( df )
r  <- rep( 1:ceiling( n / partition_size ) , each = partition_size )[ 1:n ]
d <- split( df , r )
if ( length( d ) == k_folds + 1 ){
d[[k_folds ]] <- rbind( d[[ k_folds ]] , d[[ k_folds + 1 ]] )
d[[ k_folds + 1 ]] <- NULL
}
return( d )
}
A <- k_folds_list ( df = df , k_folds = k_folds )
View(A)
setwd("~/Documents/GitHub/academic-website")
setwd("/Volumes/LaCie/Time-series-sdms")
install.packages("distill")
install.packages("distill")
install.packages("distill")
